{
   "enums" : {
      "MapMode" : ["VIEW", "BUILD", "DESTROY"],
      "BuildingType" : ["ROAD_ONLY", "GATE", "CITY", "DAIRY_FARM", "GRAIN_FARM", "STORAGE", "PROCESSOR", "EXPORT_DEPOT"],
      "TileType" : ["LAND", "WATER", "DEEP_WATER", "TODO : check if this is complete"],
      "TileObject" : ["TODO : this is like tree or rock or whatever"],
      "CardinalDirection" : ["N", "NE", "SE", "S", "SW", "NW"],
      "PolicyCategory" : ["ECONOMY", "ECOLOGY"],
      "PolicyType" : ["SALES", "IMPORT", "RUNOFF", "CLEANUP"],
      "SalesPolicy" : ["NOT_SET", "NONE", "LOW_TAX", "HIGH_TAX", "SUBSIDY"],
      "ImportPolicy" : ["NOT_SET", "NONE", "MILK", "GRAIN", "FERTILIZER"],
      "RunoffPolicy" : ["NOT_SET", "NONE", "LOW", "HIGH", "VERY_HIGH"],
      "CleanupPolicy" : ["NOT_SET", "NONE", "LOW_SKIMMING", "HIGH_SKIMMING", "SKIM_AND_DREDGE"],
      "CharacterClass" : ["TODO : This includes ECONOMY_ADVISOR, ECOLOGY_ADVISOR, PHOS4US, GRAIN_FARMER, DAIRY_FARMER, etc. but need to get full list"],
      "AlertType" : ["TODO : This is the different kinds of notification, but we haven't decided on granularity yet. Would inclue e.g. BLOOM_WARNING, or OPTIONAL_DIALOG, or whatever else"],
      "ZoomType" : ["BUTTON", "SCROLL"],
      "LossType" : ["CityFailed", "TooManyBlooms", "OutOfMoney"]
   },
   "game_state" : {
      "seconds_from_launch" : {
         "type" : "float",
         "description" : "The number of seconds of game time elapsed since the game was launched, *not including time when the game was paused*."
      },
      "current_county" : {
         "type" : "str",
         "description" : "The current county where the player is located"
      },
      "current_money" : {
         "type" : "int",
         "description" : "The current amount of money the county has available"
      },
      "map_mode" : {
         "type" : "MapMode",
         "description" : "Whether the player is currently in view, build, or destroy mode."
      },
      "county_policies" : {
         "type": "Dict[str, Any]",
         "details": {
            "sales":"Dict",
            "import_subsidy":"Dict{policy_choice, is_locked}",
            "runoff" : "Dict{policy_choice, is_locked}",
            "cleanup" : "Dict{policy_choice, is_locked}"
         },
         "description": "The set of policies in the current county. Has elements for each of the four policy choices, which each in turn are subdictionaries that have elements with the policy choice and whether the choice is locked."
      },
      "phosphorus_view_enabled" : {
         "type" : "bool",
         "description" : "Whether the player currently has the phosphorus overlay mode enabled"
      }
   },
   
   "events": {
      "session_start": {
         "description": "When the app is started and the gameplay session is assigned a session ID",
         "event_data": {
         }
      },
      "game_start": {
         "description": "When a game is actually loaded/started, showing the player their interface and map.",
         "event_data": {
            "music_volume" : {
               "type" : "float",
               "description" : "The volume for the in-game music, set in the new/resume game panel."
            },
            "fullscreen_enabled" : {
               "type" : "bool",
               "description" : "True if the player has enabled fullscreen play, or false if not."
            },
            "hq_graphics_enabled" : {
               "type" : "bool",
               "description" : "True if the player has enabled high-quality graphics, or false if not."
            },
            "map_state" : {
               "type" : "Dict[str, List[Dict]]",
               "details": {
                  "coordinates":"List",
                  "height" : "int",
                  "tile_elevation":"int (TODO : or was this a List[int]?)",
                  "tile_types" : "List[TileType]",
                  "tile_objects" : "List[TileObject]",
                  "building" : "Dict{tile_id, building_type, connections} | null"
               },
               "description" : "A collection of individual county maps for the game, in their initial states at load time. Each county map is made up of a list of sub-dictionaries defining individual build tiles, which contain the tile's hex coordinates, elevation, tile type, and objects on the tile. If this event is a 'resume', some of the tiles will contain buildings (a sub-dict with tile ID, building type, and list of road connections on the tile)."
            }
         }
      },
      "win_game": {
         "description": "When the player enters the game win state, and is shown the 'you win' cutscene",
         "event_data": {
            "map_state" : {
               "type" : "TODO : BuildMap",
               "description" : "The state of the build map when the player entered the win state."
            }
         }
      },
      "lose_game": {
         "description": "When the player enters the game lose state, and is taken back to a checkpoint to try again.",
         "event_data": {
            "lose_condition" : {
               "type" : "LossType",
               "description" : "The state of the build map when the player entered the win state."
            }
         }
      },

      "click_new_game": {
         "description": "When the player clicks the button for a new game. This should bring the 'new game' menu",
         "event_data": {
         }
      },
      "click_resume_game": {
         "description": "When the player clicks the button for a new game. This should bring up the 'resume' game menu",
         "event_data": {
         }
      },
      "click_play_game": {
         "description": "When the player clicks the button to actually launch the game, whether from the 'new' or 'resume' menu",
         "event_data": {
         }
      },
      "pause_game": {
         "description": "When the player presses the spacebar or escape key to pause the game",
         "event_data": {
         }
      },
      "unpause_game": {
         "description": "When the player presses the spacebar or escape key to un-pause the game",
         "event_data": {
         }
      },
      "click_credits": {
         "description": "When the player clicks to play the game credits. Not actually sure if this feature still exists...",
         "event_data": {
         }
      },
      "close_credits": {
         "description": "When the player exits the credits sequence",
         "event_data": {
         }
      },
      "click_return_main_menu": {
         "description": "When the player clicks the button to return to the main menu from the (not sure if this used to be from the game or the new/resume game menu, in either case, it seems like this no longer exists...)",
         "event_data": {
         }
      },
      "toggle_fullscreen_setting": {
         "description": "When the player ticks/unticks the fullscreen setting the new/resume game panel",
         "event_data": {
            "enabled" : {
               "type" : "bool",
               "description" : "True if the click enabled the fullscreen setting, or false if it disabled the setting."
            }
         }
      },
      "toggle_hq_graphics": {
         "description": "When the player ticks/unticks the box for the high-quality graphics setting the new/resume game panel",
         "event_data": {
            "enabled" : {
               "type" : "bool",
               "description" : "True if the click enabled the hq graphics setting, or false if it disabled the setting."
            }
         }
      },
      "set_music_volume": {
         "description": "When the player clicks or releases the music volume slider, setting a new volume level",
         "event_data": {
            "old_volume" : {
               "type" : "float",
               "description" : "The initial value of the slider."
            },
            "new_volume" : {
               "type" : "float",
               "description" : "The initial value of the slider."
            },
            "adjustment_type" : {
               "type" : "enum('CLICK', 'SLIDE')",
               "description" : "Whether the player used a click or a drag-and-release adjustment on the slider."
            }
         }
      },
      "county_unlocked": {
         "description": "When the game unlocks a new county for the player to explore",
         "event_data": {
            "county_name" : {
               "type" : "str",
               "description" : "The name of the newly-unlocked county."
            },
            "map_state" : {
               "type" : "List[Dict]",
               "details": {
                  "coordinates":"List",
                  "tile_elevation":"int",
                  "tile_type" : "TileType",
                  "tile_objects" : "List[TileObject]"
               },
               "description" : "A collection of sub-dictionaries defining individual build tiles in the county map, which contain the tile's hex coordinates, elevation, tile type, and objects on the tile."
            }
         }
      },
      "cutscene_start": {
         "description": "When a game cutscene is triggered",
         "event_data": {
            "cutscene_id" : {
               "type" : "str",
               "description" : "The ID for the specific cutscene."
            }
         }
      },
      "cutscene_end": {
         "description": "When a game cutscene is completed",
         "event_data": {
            "cutscene_id" : {
               "type" : "str",
               "description" : "The ID for the specific cutscene."
            }
         }
      },
      "cutscene_page_displayed": {
         "description": "When a new page of the cutscene is displayed for the player to read",
         "event_data": {
            "cutscene_id" : {
               "type" : "str",
               "description" : "The ID for the specific cutscene."
            },
            "page_id" : {
               "type" : "str",
               "description" : "The ID for the specific page of the cutscene, which can be cross-referenced with game metadata."
            },
            "frame_ids" : {
               "type" : "List[str]",
               "description" : "The list, in order, of IDs for each frame within the given cutscene page."
            },
            "page_text" : {
               "type" : "str",
               "description" : "The text content of the cutscene page."
            }
         }
      },
      "click_cutscene_next": {
         "description": "When the player has finished reading the current cutscene page, and clicks to advance to the next one.",
         "event_data": {
            "cutscene_id" : {
               "type" : "str",
               "description" : "The ID for the specific cutscene."
            },
            "page_id" : {
               "type" : "str",
               "description" : "The ID for the specific cutscene page that was just finished, which can be cross-referenced with game metadata."
            }
         }
      },
      "dialog_start": {
         "description": "When an in-game dialog scene begins, whether a part of a tutorial, the result of the player clicking a dialog notification, or clicking a warning notification",
         "event_data": {
            "node_id" : {
               "type" : "str",
               "description" : "The ID for the specific dialog node, which can be cross-referenced with game metadata to recover the contents of the dialog."
            },
            "skippable" : {
               "type" : "bool",
               "description" : "Whether this particular dialog can be skipped/ignored, or must be viewed before resuming the game."
            }
         }
      },
      "dialog_end": {
         "description": "When an in-game dialog scene completes, whether it was triggered as a part of a tutorial, the result of the player clicking a dialog notification, or clicking a warning notification",
         "event_data": {
            "node_id" : {
               "type" : "str",
               "description" : "The ID for the specific dialog node, which can be cross-referenced with game metadata to recover the contents of the dialog."
            },
            "skippable" : {
               "type" : "bool",
               "description" : "Whether this particular dialog can be skipped/ignored, or must be viewed before resuming the game."
            }
         }
      },
      "character_line_displayed": {
         "description": "When a character has a line displayed during in-game dialog",
         "event_data": {
            "character_name" : {
               "type" : "str",
               "description" : "The specific name of the character 'speaking' the line of dialog."
            },
            "character_type" : {
               "type" : "CharacterType",
               "description" : "The kind of character who is 'speaking,' such as an advisor or farmer."
            },
            "line_text" : {
               "type" : "str",
               "description" : "The actual content of the line of dialog."
            }
         }
      },
      "click_next_character_line": {
         "description": "When the player finishes reading the current line of dialog, and clicks to advance to the next",
         "event_data": {
            "character_name" : {
               "type" : "str",
               "description" : "The specific name of the character 'speaking' the line of dialog."
            },
            "character_type" : {
               "type" : "CharacterType",
               "description" : "The kind of character who is 'speaking,' such as an advisor or farmer."
            },
            "line_text" : {
               "type" : "str",
               "description" : "The actual content of the line of dialog that was just completed (not the line that will be shown next)."
            }
         }
      },
      "open_economy_view": {
         "description": "When the player clicks to open the economy breakdown view",
         "event_data": {
         }
      },
      "close_economy_view": {
         "description": "When the player exits the economy breakdown view",
         "event_data": {
         }
      },
      "toggle_map_mode": {
         "description": "When the player toggles between view and build mode for the map.",
         "event_data": {
            "new_mode" : {
               "type" : "MapMode",
               "description" : "The mode the player toggled into, should only be able to go into VIEW or BUILD modes"
            }
         }
      },
      "build_menu_displayed": {
         "description": "When the game displays the build menu, in response to the player entering build mode.",
         "event_data": {
            "available_buildings" : {
               "type" : "List[Dict]",
               "details": {
                  "name":"str",
                  "price":"int"
               },
               "description" : "The buildings available for the player to construct"
            }
         }
      },
      "enter_destroy_mode": {
         "description": "When the player is in build mode, and clicks the 'destroy' button to go into destroy mode",
         "event_data": {
         }
      },
      "exit_destroy_mode": {
         "description": "When the player is in destroy mode, and clicks to return to normal build mode",
         "event_data": {
         }
      },
      "global_alert_displayed": {
         "description": "When game displays a notification/alert pop-up, such as a bloom warning, a farm losing money, or an optional dialog.",
         "event_data": {
            "alert_type" : {
               "type" : "AlertType",
               "description" : "The kind of alert that was displayed."
            }
         }
      },
      "click_global_alert": {
         "description": "When the player clicks on an in-game notification/alert pop-up, such as a bloom warning, a farm losing money, or an optional dialog.",
         "event_data": {
            "notification_type" : {
               "type" : "AlertType",
               "description" : "The kind of alert the player clicked."
            },
            "node_id" : {
               "type" : "str",
               "description" : "The ID of the node displayed when the alert is clicked"
            }
         }
      },
      "change_zoom": {
         "description": "When the player clicks on an in-game notification/alert pop-up, such as a bloom warning, a farm losing money, or an optional dialog.",
         "event_data": {
            "zoom_type" : {
               "type" : "ZoomType",
               "description" : "Whether the player zoomed with the zoom buttons or a mouse/trackpad scroll."
            },
            "start_zoom" : {
               "type" : "float",
               "description" : "The initial zoom level, before the button click/scroll"
            },
            "end_zoom" : {
               "type" : "float",
               "description" : "The final zoom level, after the button click/scroll"
            }
         }
      },
      "click_open_policy_category": {
         "description": "When the player clicks to pop up the list of policies within the economy or ecology policy category.",
         "event_data": {
            "category" : {
               "type" : "PolicyCategory",
               "description" : "Whether the player opened up the economic or ecologic category."
            }
         }
      },
      "click_open_policy": {
         "description": "When the player clicks to open the policy card choices for a specific policy type.",
         "event_data": {
            "policy" : {
               "type" : "PolicyType",
               "description" : "The specific policy that was clicked, i.e. sales tax, import subsidy, runoff fine, or cleanup initiative."
            },
            "from_taskbar" : {
               "type" : "bool",
               "description" : "Whether the player opened the policy from the county taskbar. If false, the policy was opened from the 'category' open as in a click_open_policy_category event."
            }
         }
      },
      "hover_policy_card": {
         "description": "When the player moves their mouse over a new policy card.",
         "event_data": {
            "policy" : {
               "type" : "PolicyType",
               "description" : "The specific policy whose cards are displayed, i.e. sales tax, import subsidy, runoff fine, or cleanup initiative."
            },
            "choice_number" : {
               "type" : "int",
               "description" : "The index, among all cards for the given policy, of the hovered policy."
            },
            "choice_name" : {
               "type" : "SalesPolicy | ImportPolicy | RunoffPolicy | CleanupPolicy",
               "description" : "The enum-ified name of the hovered policy."
            },
            "choice_text" : {
               "type" : "str",
               "description" : "The text content of the hovered card."
            }
         }
      },
      "select_policy_card": {
         "description": "When the player clicks a policy card, selecting it as the new setting for the given policy in the current county.",
         "event_data": {
            "policy" : {
               "type" : "PolicyType",
               "description" : "The specific policy whose card was selected."
            },
            "choice_number" : {
               "type" : "int",
               "description" : "The index, among all cards for the given policy, of the selected policy."
            },
            "choice_name" : {
               "type" : "SalesPolicy | ImportPolicy | RunoffPolicy | CleanupPolicy",
               "description" : "The enum-ified name of the selected policy."
            },
            "choice_text" : {
               "type" : "str",
               "description" : "The text content of the selected card."
            }
         }
      },
      "click_inspect_building": {
         "description": "When the player clicks a building on the map, to review its current state.",
         "event_data": {
            "building_type" : {
               "type" : "BuildingType",
               "description" : "The specific type of building selected for inspection."
            },
            "tile_id" : {
               "type" : "str",
               "description" : "The index, within the county map, of the tile containing the building being inspected."
            },
            "connections" : {
               "type" : "List[CardinalDirection]",
               "description" : "The directions on the tile containing road connections."
            }
         }
      },
      "dismiss_building_inspector": {
         "description": "When the player clicks away from a building inspector.",
         "event_data": {
            "building_type" : {
               "type" : "BuildingType",
               "description" : "The specific type of building that was inspected."
            },
            "tile_id" : {
               "type" : "str",
               "description" : "The index, among all cards for the given policy, of the selected policy."
            },
            "connections" : {
               "type" : "List[CardinalDirection]",
               "description" : "The text content of the selected card."
            }
         }
      }
   },
   
   "features": {
      "per_count": {
      },
      "aggregate":{
      }
   },
   
   "config": {
      "SUPPORTED_VERS": [1]
   }
}
