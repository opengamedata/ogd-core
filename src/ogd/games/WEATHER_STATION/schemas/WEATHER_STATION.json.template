{
    "enums" : {
        "Speaker" : ["RAY", "MISSION_CONTROL", "ALEX", "MATT", "ARGO"],
        "DialogType" : ["EXPOSITION", "HINT", "FUN_FACT"],
        "HighlightObject" : [
            "TODO"
        ],
        "Destination" : ["SLED", "WORKBENCH", "TOWER"],
        "PuzzleObject" : ["SOLAR", "TURBINE", "BATTERY", "THERMOMETER", "DATA_LOGGER", "ARGO"],
        "Location" : ["INSIDE", "OUTSIDE"],
        "PropellerShape" : ["BROKEN", "LARGE", "MEDIUM", "SMALL"],
        "PuckShape" : ["TODO"],
        "BatteryShape" : ["DEAD", "CELL", "TODO"],
        "ThermometerComponentShape" : ["TODO"],
        "Hand" : ["LEFT", "RIGHT"]
    },
    "game_state" : {
        "seconds_from_launch" : {
            "type" : "float",
            "description" : "The number of seconds of game time elapsed since the game was launched, *not including time when the game was paused*."
        },
        "level" : {
            "type" : "int",
            "description" : "The current level the player is in (1-5, or 6 for the epilogue)"
        },
        "location" : {
            "type" : "Location",
            "description" : "Indicator for whether the player is located outside at the tower or inside at the workbench"
        },
        "pos" : {
            "type" : "List[float]",
            "description" : "The current position (x, y, z) of the headset at the moment the event occurred."
        },
        "rot" : {
            "type" : "List[float]",
            "description" : "The current orientation (x, y, z, w) of the headset at the moment the event occurred."
        },
        "highlighted_objects" : {
            "type" : "List[HighlightObject]",
            "description" : "The current orientation (x, y, z, w) of the headset at the moment the event occurred."
        },
        "puzzles_complete" : {
            "type" : "List[PuzzleObject]",
            "description" : "List of which puzzles the player has completed in the given level."
        },
        "puzzles_incomplete" : {
            "type" : "List[PuzzleObject]",
            "description" : "List of which puzzles remain to be completed in the given level."
        }
    },

    "events": {
        "session_start": {
            "description": "When the app is started and the gameplay session is assigned a session ID",
            "event_data": {
            }
        },
        "game_start": {
            "description": "When the player starts a new game (at present, this happens automatically at launch, but in the future the player will launch a new game from a menu).",
            "event_data": {
            }
        },
        "viewport_data": {
            "description": "An event sent approximately once per second, containing the in-game position and orientation of the player headset for each frame in the past second",
            "event_data": {
                "gaze_data_package" : {
                    "type" : "List[Dict]",
                    "details" : {
                        "pos" : "List[float]",
                        "rot" : "List[float]"
                    },
                    "description" : "A list of dicts, where each dict is one frame of headset data, containing a position and rotation vector, e.g. {\"pos\":[1,2,3], \"rot\":[4,5,6,7]}."
                }
            }
        },
        "left_hand_data": {
            "description": "An event sent approximately once per second, containing the in-game position and orientation of the player's left hand for each frame in the past second",
            "event_data": {
                "left_hand_data_package": {
                    "type": "List[Dict]",
                    "details" : {
                        "pos" : "List[float]",
                        "rot" : "List[float]"
                    },
                    "description": "A list of dicts, where each dict is one frame of left-hand data, containing a position and rotation vector, e.g. {\"pos\":[1,2,3], \"rot\":[4,5,6,7]}."
                }
            }
        },
        "right_hand_data": {
            "description": "An event sent approximately once per second, containing the in-game position and orientation of the player's right hand for each frame in the past second",
            "event_data": {
                "right_hand_data_package": {
                    "type": "List[Dict]",
                    "details" : {
                        "pos" : "List[float]",
                        "rot" : "List[float]"
                    },
                    "description": "A list of dicts, where each dict is one frame of right-hand data, containing a position and rotation vector, e.g. {\"pos\":[1,2,3], \"rot\":[4,5,6,7]}."
                }
            }
        },
        "headset_on": {
            "description": "When the player puts the headset on, resuming the game",
            "event_data": {}
        },
        "headset_off": {
            "description": "When the player removes the headset from their head, pausing the game",
            "event_data": {}
        },
        "grab_gesture": {
            "description": "When the player presses the trigger to perform a grab, whether the 'grab' did anything or not.",
            "event_data": {
                "pos": {
                    "type": "Dict[str, float]",
                    "details" : {
                        "pos_x" : "float",
                        "pos_y" : "float",
                        "pos_z" : "float"
                    },
                    "description": "The position of the hand when the 'grab' was triggered"
                },
                "rot": {
                    "type": "Dict[str, float]",
                    "details" : {
                        "rot_x" : "float",
                        "rot_y" : "float",
                        "rot_z" : "float",
                        "rot_w" : "float"
                    },
                    "description": "The orientation of the hand when the 'grab' was triggered"
                },
                "hand": {
                    "type": "enum(Hand)",
                    "description": "Indicator of whether the player grabbed with their right or left hand."
                }
            }
        },
        "release_gesture": {
            "description": "When the player releases the trigger button to end a 'grab'",
            "event_data": {
                "pos": {
                    "type": "Dict[str, float]",
                    "details" : {
                        "pos_x" : "float",
                        "pos_y" : "float",
                        "pos_z" : "float"
                    },
                    "description": "The position of the hand when the 'grab' was released"
                },
                "rot": {
                    "type": "Dict[str, float]",
                    "details" : {
                        "rot_x" : "float",
                        "rot_y" : "float",
                        "rot_z" : "float",
                        "rot_w" : "float"
                    },
                    "description": "The orientation of the hand when the 'grab' was released"
                },
                "hand": {
                    "type": "enum(Hand)",
                    "description": "Indicator of whether the player grabbed with their right or left hand."
                }
            }
        },
        "dialog_audio_start" : {
            "description" : "When a voiceover audio clip begins",
            "event_data" : {
                "dialog_id" : {
                    "type":"str",
                    "description":"The identifier of the dialog audio, which can be cross-referenced against DBExport."
                },
                "dialog_type" : {
                    "type":"enum(DialogType)",
                    "description":"Indicator for whether the dialog was exposition, a hint, or a fun fact."
                },
                "speaker" : {
                    "type":"enum(Speaker)",
                    "description":"Which character speaks the dialog"
                }
            }
        },
        "dialog_audio_end" : {
            "description" : "When a voiceover audio clip ends",
            "event_data" : {
                "dialog_id" : {
                    "type":"str",
                    "description":"The identifier of the dialog audio, which can be cross-referenced against DBExport."
                },
                "dialog_type" : {
                    "type":"enum(DialogType)",
                    "description":"Indicator for whether the dialog was exposition, a hint, or a fun fact."
                },
                "speaker" : {
                    "type":"enum(Speaker)",
                    "description":"Which character spoke the dialog"
                }
            }
        }
    },

    "features": {
        "per_count": {
        },
        "aggregate":{
        }
    },

    "config": {
    	"SUPPORTED_VERS": [1]
	}
}
