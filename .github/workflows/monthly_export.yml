# Workflow to run monthly exports of data.
name: Monthly Automated Exports

on:
  schedule:
    - cron: '1 0 2 * *'
  workflow_dispatch:

env:
  STANDALONE_BQ_GAMES: '["SHIPWRECKS"]'

jobs:
  export_data:
    name: Export All Games
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        game: [
          AQUALAB,
          BACTERIA,
          BALLOON,
          CRYSTAL,
          CYCLE_CARBON,
          CYCLE_NITROGEN,
          CYCLE_WATER,
          EARTHQUAKE,
          ICECUBE,
          JOURNALISM,
          JOWILDER,
          LAKELAND,
          MAGNET,
          PENGUINS,
          SHADOWSPECT,
          SHIPWRECKS,
          TRANSFORMATION_QUEST,
          WAVES,
          WIND]
      fail-fast: false # we don't want to cancel just because one game fails.
      max-parallel: 20

    steps:

  # 1. Local checkout 
    - name: Checkout repository
      uses: actions/checkout@v3
    # Need to get VPN connection in this case so we can upload file to server
    - name: Get OpenConnect
      run: sudo apt-get -q update && sudo apt-get -q install openconnect
    - name: Get Dependencies
      uses: opengamedata/actions-setup-ogd-py-dependencies@v1.1
      with:
        python_version: ${{ vars.OGD_PYTHON_VERSION }}

  # 2. Configure cloud & local environments
    - name: Connect VPN
      run: echo ${{ secrets.VPN_PASS }} | sudo openconnect --protocol=gp -u ${{ secrets.VPN_USER }} --passwd-on-stdin soe.vpn.wisc.edu &
      # A bunch of copy-paste crap to set up google cloud for any given game.
    - if: ${{ !contains(fromJson( env.STANDALONE_BQ_GAMES ), matrix.game) }}
      name: Set up Cloud SDK for OGD BigQuery
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ secrets.OGD_BQ_PROJECT_ID }}
        service_account_key: ${{ secrets.OGD_SELECTOR_BQ_KEY }}
        export_default_credentials: true
    - if: ${{ matrix.game == 'SHIPWRECKS' }}
      name: Set up Cloud SDK for Shipwrecks
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ secrets.BQ_SHIPWRECKS_PROJECT_ID }}
        service_account_key: ${{ secrets.BQ_SHIPWRECKS_JSON }}
        export_default_credentials: true
      # Back to normal setup stuff.
    - name: Set up Config File
      uses: ./.github/actions/OGD_config
      with:
        sql_user: ${{secrets.SQL_USER}}
        sql_pass: ${{secrets.SQL_PASS}}
        ssh_host: ${{vars.FD_STORE_HOST}}
        ssh_user: ${{secrets.VPN_USER}}
        ssh_pass: ${{secrets.VPN_PASS}}
        log_level: "INFO"
    - name: Set up Schema File
      uses: ./.github/actions/OGD_schema
      with:
        game: ${{matrix.game}}

  # 3. Perform export & upload
    - name: Do Export of last month
      uses: ./.github/actions/export_last_month
      with:
        game: ${{matrix.game}}
    - name: Upload files to opengamedata via scp
      run: |
        mkdir -p ~/.ssh
        echo '${{secrets.VPN_KEY}}' >> ./key.txt
        chmod 600 ./key.txt
        ssh -o StrictHostKeyChecking=no -i ./key.txt ${{ secrets.VPN_USER }}@${{ vars.FD_WEB_HOST }} "cd /var/www/opengamedata/data; mkdir -p ${{matrix.game}}"
        scp -o StrictHostKeyChecking=no -i ./key.txt ./data/${{matrix.game}}/* ${{ secrets.VPN_USER }}@${{ vars.FD_WEB_HOST }}:/var/www/opengamedata/data/${{matrix.game}}/

  # 4. Cleanup & complete
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v3
      with:
        path: ./*.log
  
  trigger_reindex:
    name: Reindex OpenGameData Files
    runs-on: ubuntu-22.04
    if: always()
    needs: export_data

    steps:
    - name: Get OpenConnect
      run: sudo apt-get -q update && sudo apt-get -q install openconnect
    - name: Connect VPN
      run: echo ${{ secrets.VPN_PASS }} | sudo openconnect --protocol=gp -u ${{ secrets.VPN_USER }} --passwd-on-stdin soe.vpn.wisc.edu &
    - name: Trigger reindex via ssh
      # run: echo "placeholder for reindexing!"
      run: |
        mkdir -p ~/.ssh
        echo '${{secrets.VPN_KEY}}' >> ./key.txt
        chmod 600 ./key.txt
        ssh -o StrictHostKeyChecking=no -i ./key.txt ${{ secrets.VPN_USER }}@${{ vars.FD_WEB_HOST }} "cd /var/www/opengamedata; pwd; ls; python3 reindexer.py;"
